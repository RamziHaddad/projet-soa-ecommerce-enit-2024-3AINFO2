quarkus.http.host=0.0.0.0
quarkus.http.port=8090
quarkus.http.cors=true
quarkus.http.cors.origins=*

quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=postgres
quarkus.datasource.password=azerty
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5442/db_shipping

# drop and create the database at startup (use `update` to only update the schema)
quarkus.hibernate-orm.database.generation=create
%dev.quarkus.hibernate-orm.log.sql=true
%dev.quarkus.hibernate-orm.log.format-sql=true
%dev.quarkus.hibernate-orm.statistics=true
quarkus.http.limits.max-form-attribute-size=4M

# Enable security
# quarkus.security.enabled=true
# Configure JWT
# mp.jwt.verify.publickey.location=https://example.com/iam/publicKey
# mp.jwt.verify.issuer=https://example.com/iam
# mp.jwt.token.header=Authorization

quarkus.kafka.devservices.enabled=false
# S'abonner Ã  un Broker Kafka pour l'event "order-paid"
mp.messaging.incoming.order-paid.connector=smallrye-kafka
mp.messaging.incoming.order-paid.topic=order-paid
mp.messaging.incoming.order-paid.group.id=shipping-group
mp.messaging.incoming.order-paid.bootstrap.servers=localhost:9092
mp.messaging.incoming.order-paid.value.deserializer=org.shipping.serialization.OrderPaidEventDeserializer

# Broker pour publier les statuts des livraisons
mp.messaging.outgoing.delivery-status.connector=smallrye-kafka
mp.messaging.outgoing.delivery-status.topic=delivery-status
mp.messaging.outgoing.delivery-status.value.serializer=org.shipping.serialization.DeliveryStatusEventSerializer
mp.messaging.outgoing.delivery-status.bootstrap.servers=localhost:9092


# Mappages pour les DeliveryStatus
event.mapping.123e4567-e89b-12d3-a456-426614174001=PENDING
event.mapping.123e4567-e89b-12d3-a456-426614174002=DELIVERED
event.mapping.123e4567-e89b-12d3-a456-426614174003=IN_PROGRESS
event.mapping.123e4567-e89b-12d3-a456-426614174004=CANCELLED
event.mapping.123e4567-e89b-12d3-a456-426614174005=RETURNED
