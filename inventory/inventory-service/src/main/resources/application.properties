quarkus.http.port=8083
quarkus.http.host=0.0.0.0
quarkus.http.cors=true
quarkus.http.cors.origins=*
# datasource configuration
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=postgres
quarkus.datasource.password=azerty
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5435/db_inventory
quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.log.sql=true
quarkus.transaction-manager.enable-default-transaction=true
# Configurer l'envoi de messages Kafka
kafka.bootstrap.servers=localhost:9092
mp.messaging.outgoing.product-events.connector=smallrye-kafka
mp.messaging.outgoing.product-events.topic=product-events
mp.messaging.outgoing.product-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer
# config for topic product-availability to the catalog service
mp.messaging.outgoing.product-availability.connector=smallrye-kafka
mp.messaging.outgoing.product-availability.topic=product-availability
mp.messaging.outgoing.product-availability.value.serializer=org.apache.kafka.common.serialization.StringSerializer

#config the pricing event for the pricing microservice
mp.messaging.outgoing.product-created-id.connector=smallrye-kafka
mp.messaging.outgoing.product-created-id.topic=product-created-id
mp.messaging.outgoing.product-created-id.value.serializer=org.apache.kafka.common.serialization.StringSerializer


#Config reception de messages kafka
mp.messaging.incoming.order-creation.connector=smallrye-kafka
mp.messaging.incoming.order-creation.topic=order-creation
mp.messaging.incoming.order-creation.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer


mp.messaging.incoming.order-status-update.connector=smallrye-kafka
mp.messaging.incoming.order-status-update.topic=order-status-update
mp.messaging.incoming.order-status-update.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer